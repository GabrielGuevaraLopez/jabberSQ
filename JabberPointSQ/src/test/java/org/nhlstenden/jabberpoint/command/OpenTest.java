package org.nhlstenden.jabberpoint.command;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.io.TempDir;
import org.nhlstenden.jabberpoint.Presentation;
import static org.junit.jupiter.api.Assertions.*;

import java.nio.file.Path;
import java.io.File;
import java.io.IOException;
class OpenTest {
    private Open openCommand;
    private Presentation presentation;

    @BeforeEach
    void setUp() {
        presentation = new Presentation();
        openCommand = new Open(presentation);
    }

    @Test
    void testConstructorNotNull() {
        assertNotNull(openCommand);
    }

    @Test
    void testConstructorHasPresentation() {
        assertNotNull(presentation);
    }

    @Test
    void testOpenEmptyPresentation() {
        assertDoesNotThrow(() -> openCommand.execute());
    }

    @Test
    void testOpenWithValidFile(@TempDir Path tempDir) throws IOException {
        File testFile = tempDir.resolve("test.xml").toFile();
        testFile.createNewFile();
        assertDoesNotThrow(() -> openCommand.execute());
    }

    @Test
    void testOpenWithNonexistentFile(@TempDir Path tempDir) {
        File nonExistentFile = tempDir.resolve("nonexistent.xml").toFile();
        assertDoesNotThrow(() -> openCommand.execute());
    }

    @Test
    void testOpenWithNullFile() {
        assertDoesNotThrow(() -> openCommand.execute());
    }

    @Test
    void testOpenWithSecurityException(@TempDir Path tempDir) {
        File restrictedFile = new File("/restricted/test.xml");
        assertDoesNotThrow(() -> openCommand.execute());
    }

    @Test
    void testOpenWithIOException(@TempDir Path tempDir) throws IOException {
        File readOnlyFile = tempDir.resolve("readonly.xml").toFile();
        readOnlyFile.createNewFile();
        readOnlyFile.setReadOnly();
        assertDoesNotThrow(() -> openCommand.execute());
    }

    @Test
    void testOpenDialogCancel() {
        assertDoesNotThrow(() -> openCommand.execute());
    }

    @Test
    void testOpenDialogApprove(@TempDir Path tempDir) throws IOException {
        File testFile = tempDir.resolve("approved.xml").toFile();
        testFile.createNewFile();
        assertDoesNotThrow(() -> openCommand.execute());
    }
    
    @Test
    void testOpenWithEmptyPath() {
        assertDoesNotThrow(() -> openCommand.execute());
    }
}
